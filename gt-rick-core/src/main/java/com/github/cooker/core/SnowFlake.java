// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snowFlake.proto

package com.github.cooker.core;

public final class SnowFlake {
  private SnowFlake() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SerialNoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.github.cooker.core.SerialNo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *数据中心
     * </pre>
     *
     * <code>uint64 datacenterId = 1;</code>
     */
    long getDatacenterId();

    /**
     * <pre>
     *机器标识
     * </pre>
     *
     * <code>uint64 machineId = 2;</code>
     */
    long getMachineId();

    /**
     * <pre>
     *序列号
     * </pre>
     *
     * <code>uint64 sequence = 3;</code>
     */
    long getSequence();

    /**
     * <pre>
     *上一次时间戳
     * </pre>
     *
     * <code>uint64 lastStmp = 4;</code>
     */
    long getLastStmp();
  }
  /**
   * Protobuf type {@code com.github.cooker.core.SerialNo}
   */
  public  static final class SerialNo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.github.cooker.core.SerialNo)
      SerialNoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SerialNo.newBuilder() to construct.
    private SerialNo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SerialNo() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SerialNo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SerialNo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              datacenterId_ = input.readUInt64();
              break;
            }
            case 16: {

              machineId_ = input.readUInt64();
              break;
            }
            case 24: {

              sequence_ = input.readUInt64();
              break;
            }
            case 32: {

              lastStmp_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.cooker.core.SnowFlake.internal_static_com_github_cooker_core_SerialNo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.cooker.core.SnowFlake.internal_static_com_github_cooker_core_SerialNo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.cooker.core.SnowFlake.SerialNo.class, com.github.cooker.core.SnowFlake.SerialNo.Builder.class);
    }

    public static final int DATACENTERID_FIELD_NUMBER = 1;
    private long datacenterId_;
    /**
     * <pre>
     *数据中心
     * </pre>
     *
     * <code>uint64 datacenterId = 1;</code>
     */
    public long getDatacenterId() {
      return datacenterId_;
    }

    public static final int MACHINEID_FIELD_NUMBER = 2;
    private long machineId_;
    /**
     * <pre>
     *机器标识
     * </pre>
     *
     * <code>uint64 machineId = 2;</code>
     */
    public long getMachineId() {
      return machineId_;
    }

    public static final int SEQUENCE_FIELD_NUMBER = 3;
    private long sequence_;
    /**
     * <pre>
     *序列号
     * </pre>
     *
     * <code>uint64 sequence = 3;</code>
     */
    public long getSequence() {
      return sequence_;
    }

    public static final int LASTSTMP_FIELD_NUMBER = 4;
    private long lastStmp_;
    /**
     * <pre>
     *上一次时间戳
     * </pre>
     *
     * <code>uint64 lastStmp = 4;</code>
     */
    public long getLastStmp() {
      return lastStmp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (datacenterId_ != 0L) {
        output.writeUInt64(1, datacenterId_);
      }
      if (machineId_ != 0L) {
        output.writeUInt64(2, machineId_);
      }
      if (sequence_ != 0L) {
        output.writeUInt64(3, sequence_);
      }
      if (lastStmp_ != 0L) {
        output.writeUInt64(4, lastStmp_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (datacenterId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, datacenterId_);
      }
      if (machineId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, machineId_);
      }
      if (sequence_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, sequence_);
      }
      if (lastStmp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, lastStmp_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.github.cooker.core.SnowFlake.SerialNo)) {
        return super.equals(obj);
      }
      com.github.cooker.core.SnowFlake.SerialNo other = (com.github.cooker.core.SnowFlake.SerialNo) obj;

      if (getDatacenterId()
          != other.getDatacenterId()) return false;
      if (getMachineId()
          != other.getMachineId()) return false;
      if (getSequence()
          != other.getSequence()) return false;
      if (getLastStmp()
          != other.getLastStmp()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DATACENTERID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDatacenterId());
      hash = (37 * hash) + MACHINEID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMachineId());
      hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSequence());
      hash = (37 * hash) + LASTSTMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLastStmp());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.github.cooker.core.SnowFlake.SerialNo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.cooker.core.SnowFlake.SerialNo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.cooker.core.SnowFlake.SerialNo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.cooker.core.SnowFlake.SerialNo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.cooker.core.SnowFlake.SerialNo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.cooker.core.SnowFlake.SerialNo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.cooker.core.SnowFlake.SerialNo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.cooker.core.SnowFlake.SerialNo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.cooker.core.SnowFlake.SerialNo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.github.cooker.core.SnowFlake.SerialNo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.cooker.core.SnowFlake.SerialNo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.cooker.core.SnowFlake.SerialNo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.cooker.core.SnowFlake.SerialNo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.github.cooker.core.SerialNo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.github.cooker.core.SerialNo)
        com.github.cooker.core.SnowFlake.SerialNoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.cooker.core.SnowFlake.internal_static_com_github_cooker_core_SerialNo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.cooker.core.SnowFlake.internal_static_com_github_cooker_core_SerialNo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.cooker.core.SnowFlake.SerialNo.class, com.github.cooker.core.SnowFlake.SerialNo.Builder.class);
      }

      // Construct using com.github.cooker.core.SnowFlake.SerialNo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        datacenterId_ = 0L;

        machineId_ = 0L;

        sequence_ = 0L;

        lastStmp_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.cooker.core.SnowFlake.internal_static_com_github_cooker_core_SerialNo_descriptor;
      }

      @java.lang.Override
      public com.github.cooker.core.SnowFlake.SerialNo getDefaultInstanceForType() {
        return com.github.cooker.core.SnowFlake.SerialNo.getDefaultInstance();
      }

      @java.lang.Override
      public com.github.cooker.core.SnowFlake.SerialNo build() {
        com.github.cooker.core.SnowFlake.SerialNo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.github.cooker.core.SnowFlake.SerialNo buildPartial() {
        com.github.cooker.core.SnowFlake.SerialNo result = new com.github.cooker.core.SnowFlake.SerialNo(this);
        result.datacenterId_ = datacenterId_;
        result.machineId_ = machineId_;
        result.sequence_ = sequence_;
        result.lastStmp_ = lastStmp_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.cooker.core.SnowFlake.SerialNo) {
          return mergeFrom((com.github.cooker.core.SnowFlake.SerialNo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.cooker.core.SnowFlake.SerialNo other) {
        if (other == com.github.cooker.core.SnowFlake.SerialNo.getDefaultInstance()) return this;
        if (other.getDatacenterId() != 0L) {
          setDatacenterId(other.getDatacenterId());
        }
        if (other.getMachineId() != 0L) {
          setMachineId(other.getMachineId());
        }
        if (other.getSequence() != 0L) {
          setSequence(other.getSequence());
        }
        if (other.getLastStmp() != 0L) {
          setLastStmp(other.getLastStmp());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.cooker.core.SnowFlake.SerialNo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.cooker.core.SnowFlake.SerialNo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long datacenterId_ ;
      /**
       * <pre>
       *数据中心
       * </pre>
       *
       * <code>uint64 datacenterId = 1;</code>
       */
      public long getDatacenterId() {
        return datacenterId_;
      }
      /**
       * <pre>
       *数据中心
       * </pre>
       *
       * <code>uint64 datacenterId = 1;</code>
       */
      public Builder setDatacenterId(long value) {
        
        datacenterId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *数据中心
       * </pre>
       *
       * <code>uint64 datacenterId = 1;</code>
       */
      public Builder clearDatacenterId() {
        
        datacenterId_ = 0L;
        onChanged();
        return this;
      }

      private long machineId_ ;
      /**
       * <pre>
       *机器标识
       * </pre>
       *
       * <code>uint64 machineId = 2;</code>
       */
      public long getMachineId() {
        return machineId_;
      }
      /**
       * <pre>
       *机器标识
       * </pre>
       *
       * <code>uint64 machineId = 2;</code>
       */
      public Builder setMachineId(long value) {
        
        machineId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *机器标识
       * </pre>
       *
       * <code>uint64 machineId = 2;</code>
       */
      public Builder clearMachineId() {
        
        machineId_ = 0L;
        onChanged();
        return this;
      }

      private long sequence_ ;
      /**
       * <pre>
       *序列号
       * </pre>
       *
       * <code>uint64 sequence = 3;</code>
       */
      public long getSequence() {
        return sequence_;
      }
      /**
       * <pre>
       *序列号
       * </pre>
       *
       * <code>uint64 sequence = 3;</code>
       */
      public Builder setSequence(long value) {
        
        sequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *序列号
       * </pre>
       *
       * <code>uint64 sequence = 3;</code>
       */
      public Builder clearSequence() {
        
        sequence_ = 0L;
        onChanged();
        return this;
      }

      private long lastStmp_ ;
      /**
       * <pre>
       *上一次时间戳
       * </pre>
       *
       * <code>uint64 lastStmp = 4;</code>
       */
      public long getLastStmp() {
        return lastStmp_;
      }
      /**
       * <pre>
       *上一次时间戳
       * </pre>
       *
       * <code>uint64 lastStmp = 4;</code>
       */
      public Builder setLastStmp(long value) {
        
        lastStmp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *上一次时间戳
       * </pre>
       *
       * <code>uint64 lastStmp = 4;</code>
       */
      public Builder clearLastStmp() {
        
        lastStmp_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.github.cooker.core.SerialNo)
    }

    // @@protoc_insertion_point(class_scope:com.github.cooker.core.SerialNo)
    private static final com.github.cooker.core.SnowFlake.SerialNo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.github.cooker.core.SnowFlake.SerialNo();
    }

    public static com.github.cooker.core.SnowFlake.SerialNo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SerialNo>
        PARSER = new com.google.protobuf.AbstractParser<SerialNo>() {
      @java.lang.Override
      public SerialNo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SerialNo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SerialNo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SerialNo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.github.cooker.core.SnowFlake.SerialNo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_github_cooker_core_SerialNo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_github_cooker_core_SerialNo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017snowFlake.proto\022\026com.github.cooker.cor" +
      "e\"W\n\010SerialNo\022\024\n\014datacenterId\030\001 \001(\004\022\021\n\tm" +
      "achineId\030\002 \001(\004\022\020\n\010sequence\030\003 \001(\004\022\020\n\010last" +
      "Stmp\030\004 \001(\004B\013B\tSnowFlakeb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_com_github_cooker_core_SerialNo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_github_cooker_core_SerialNo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_github_cooker_core_SerialNo_descriptor,
        new java.lang.String[] { "DatacenterId", "MachineId", "Sequence", "LastStmp", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
