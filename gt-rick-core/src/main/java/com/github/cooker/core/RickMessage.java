// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

package com.github.cooker.core;

public final class RickMessage {
  private RickMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface msgOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.github.cooker.core.msg)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 1;</code>
     */
    boolean hasTimestamp();
    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 1;</code>
     */
    com.google.protobuf.Timestamp getTimestamp();
    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 1;</code>
     */
    com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder();

    /**
     * <pre>
     *请求序号
     * </pre>
     *
     * <code>uint64 serialNo = 2;</code>
     */
    long getSerialNo();

    /**
     * <code>string businessNo = 3;</code>
     */
    java.lang.String getBusinessNo();
    /**
     * <code>string businessNo = 3;</code>
     */
    com.google.protobuf.ByteString
        getBusinessNoBytes();

    /**
     * <pre>
     *方法
     * </pre>
     *
     * <code>string method = 4;</code>
     */
    java.lang.String getMethod();
    /**
     * <pre>
     *方法
     * </pre>
     *
     * <code>string method = 4;</code>
     */
    com.google.protobuf.ByteString
        getMethodBytes();

    /**
     * <pre>
     *客户端号
     * </pre>
     *
     * <code>string clientId = 5;</code>
     */
    java.lang.String getClientId();
    /**
     * <pre>
     *客户端号
     * </pre>
     *
     * <code>string clientId = 5;</code>
     */
    com.google.protobuf.ByteString
        getClientIdBytes();

    /**
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    int getParamsCount();
    /**
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    boolean containsParams(
        java.lang.String key);
    /**
     * Use {@link #getParamsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getParams();
    /**
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getParamsMap();
    /**
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    java.lang.String getParamsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    java.lang.String getParamsOrThrow(
        java.lang.String key);

    /**
     * <code>uint32 router = 7;</code>
     */
    int getRouter();

    /**
     * <code>.com.github.cooker.core.messageType type = 8;</code>
     */
    int getTypeValue();
    /**
     * <code>.com.github.cooker.core.messageType type = 8;</code>
     */
    com.github.cooker.core.RickType.messageType getType();

    /**
     * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
     */
    boolean hasMethodBody();
    /**
     * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
     */
    com.github.cooker.core.RickMethodMessage.methodMessage getMethodBody();
    /**
     * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
     */
    com.github.cooker.core.RickMethodMessage.methodMessageOrBuilder getMethodBodyOrBuilder();

    /**
     * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
     */
    boolean hasLogBody();
    /**
     * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
     */
    com.github.cooker.core.RickLogMessage.logMessage getLogBody();
    /**
     * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
     */
    com.github.cooker.core.RickLogMessage.logMessageOrBuilder getLogBodyOrBuilder();

    /**
     * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
     */
    boolean hasFileBody();
    /**
     * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
     */
    com.github.cooker.core.RickFileMessage.fileMessage getFileBody();
    /**
     * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
     */
    com.github.cooker.core.RickFileMessage.fileMessageOrBuilder getFileBodyOrBuilder();

    public com.github.cooker.core.RickMessage.msg.BodyCase getBodyCase();
  }
  /**
   * Protobuf type {@code com.github.cooker.core.msg}
   */
  public  static final class msg extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.github.cooker.core.msg)
      msgOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use msg.newBuilder() to construct.
    private msg(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private msg() {
      businessNo_ = "";
      method_ = "";
      clientId_ = "";
      type_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new msg();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private msg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.Timestamp.Builder subBuilder = null;
              if (timestamp_ != null) {
                subBuilder = timestamp_.toBuilder();
              }
              timestamp_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(timestamp_);
                timestamp_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              serialNo_ = input.readUInt64();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              businessNo_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              method_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              clientId_ = s;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                params_ = com.google.protobuf.MapField.newMapField(
                    ParamsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              params__ = input.readMessage(
                  ParamsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              params_.getMutableMap().put(
                  params__.getKey(), params__.getValue());
              break;
            }
            case 56: {

              router_ = input.readUInt32();
              break;
            }
            case 64: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 74: {
              com.github.cooker.core.RickMethodMessage.methodMessage.Builder subBuilder = null;
              if (bodyCase_ == 9) {
                subBuilder = ((com.github.cooker.core.RickMethodMessage.methodMessage) body_).toBuilder();
              }
              body_ =
                  input.readMessage(com.github.cooker.core.RickMethodMessage.methodMessage.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.github.cooker.core.RickMethodMessage.methodMessage) body_);
                body_ = subBuilder.buildPartial();
              }
              bodyCase_ = 9;
              break;
            }
            case 82: {
              com.github.cooker.core.RickLogMessage.logMessage.Builder subBuilder = null;
              if (bodyCase_ == 10) {
                subBuilder = ((com.github.cooker.core.RickLogMessage.logMessage) body_).toBuilder();
              }
              body_ =
                  input.readMessage(com.github.cooker.core.RickLogMessage.logMessage.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.github.cooker.core.RickLogMessage.logMessage) body_);
                body_ = subBuilder.buildPartial();
              }
              bodyCase_ = 10;
              break;
            }
            case 90: {
              com.github.cooker.core.RickFileMessage.fileMessage.Builder subBuilder = null;
              if (bodyCase_ == 11) {
                subBuilder = ((com.github.cooker.core.RickFileMessage.fileMessage) body_).toBuilder();
              }
              body_ =
                  input.readMessage(com.github.cooker.core.RickFileMessage.fileMessage.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.github.cooker.core.RickFileMessage.fileMessage) body_);
                body_ = subBuilder.buildPartial();
              }
              bodyCase_ = 11;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.cooker.core.RickMessage.internal_static_com_github_cooker_core_msg_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetParams();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.cooker.core.RickMessage.internal_static_com_github_cooker_core_msg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.cooker.core.RickMessage.msg.class, com.github.cooker.core.RickMessage.msg.Builder.class);
    }

    private int bodyCase_ = 0;
    private java.lang.Object body_;
    public enum BodyCase
        implements com.google.protobuf.Internal.EnumLite {
      METHODBODY(9),
      LOGBODY(10),
      FILEBODY(11),
      BODY_NOT_SET(0);
      private final int value;
      private BodyCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static BodyCase valueOf(int value) {
        return forNumber(value);
      }

      public static BodyCase forNumber(int value) {
        switch (value) {
          case 9: return METHODBODY;
          case 10: return LOGBODY;
          case 11: return FILEBODY;
          case 0: return BODY_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public BodyCase
    getBodyCase() {
      return BodyCase.forNumber(
          bodyCase_);
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private com.google.protobuf.Timestamp timestamp_;
    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 1;</code>
     */
    public boolean hasTimestamp() {
      return timestamp_ != null;
    }
    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 1;</code>
     */
    public com.google.protobuf.Timestamp getTimestamp() {
      return timestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
    }
    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp = 1;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder() {
      return getTimestamp();
    }

    public static final int SERIALNO_FIELD_NUMBER = 2;
    private long serialNo_;
    /**
     * <pre>
     *请求序号
     * </pre>
     *
     * <code>uint64 serialNo = 2;</code>
     */
    public long getSerialNo() {
      return serialNo_;
    }

    public static final int BUSINESSNO_FIELD_NUMBER = 3;
    private volatile java.lang.Object businessNo_;
    /**
     * <code>string businessNo = 3;</code>
     */
    public java.lang.String getBusinessNo() {
      java.lang.Object ref = businessNo_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        businessNo_ = s;
        return s;
      }
    }
    /**
     * <code>string businessNo = 3;</code>
     */
    public com.google.protobuf.ByteString
        getBusinessNoBytes() {
      java.lang.Object ref = businessNo_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        businessNo_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int METHOD_FIELD_NUMBER = 4;
    private volatile java.lang.Object method_;
    /**
     * <pre>
     *方法
     * </pre>
     *
     * <code>string method = 4;</code>
     */
    public java.lang.String getMethod() {
      java.lang.Object ref = method_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        method_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *方法
     * </pre>
     *
     * <code>string method = 4;</code>
     */
    public com.google.protobuf.ByteString
        getMethodBytes() {
      java.lang.Object ref = method_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        method_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CLIENTID_FIELD_NUMBER = 5;
    private volatile java.lang.Object clientId_;
    /**
     * <pre>
     *客户端号
     * </pre>
     *
     * <code>string clientId = 5;</code>
     */
    public java.lang.String getClientId() {
      java.lang.Object ref = clientId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        clientId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *客户端号
     * </pre>
     *
     * <code>string clientId = 5;</code>
     */
    public com.google.protobuf.ByteString
        getClientIdBytes() {
      java.lang.Object ref = clientId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        clientId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARAMS_FIELD_NUMBER = 6;
    private static final class ParamsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.github.cooker.core.RickMessage.internal_static_com_github_cooker_core_msg_ParamsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> params_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetParams() {
      if (params_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ParamsDefaultEntryHolder.defaultEntry);
      }
      return params_;
    }

    public int getParamsCount() {
      return internalGetParams().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    public boolean containsParams(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetParams().getMap().containsKey(key);
    }
    /**
     * Use {@link #getParamsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getParams() {
      return getParamsMap();
    }
    /**
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getParamsMap() {
      return internalGetParams().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    public java.lang.String getParamsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParams().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    public java.lang.String getParamsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParams().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int ROUTER_FIELD_NUMBER = 7;
    private int router_;
    /**
     * <code>uint32 router = 7;</code>
     */
    public int getRouter() {
      return router_;
    }

    public static final int TYPE_FIELD_NUMBER = 8;
    private int type_;
    /**
     * <code>.com.github.cooker.core.messageType type = 8;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.com.github.cooker.core.messageType type = 8;</code>
     */
    public com.github.cooker.core.RickType.messageType getType() {
      @SuppressWarnings("deprecation")
      com.github.cooker.core.RickType.messageType result = com.github.cooker.core.RickType.messageType.valueOf(type_);
      return result == null ? com.github.cooker.core.RickType.messageType.UNRECOGNIZED : result;
    }

    public static final int METHODBODY_FIELD_NUMBER = 9;
    /**
     * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
     */
    public boolean hasMethodBody() {
      return bodyCase_ == 9;
    }
    /**
     * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
     */
    public com.github.cooker.core.RickMethodMessage.methodMessage getMethodBody() {
      if (bodyCase_ == 9) {
         return (com.github.cooker.core.RickMethodMessage.methodMessage) body_;
      }
      return com.github.cooker.core.RickMethodMessage.methodMessage.getDefaultInstance();
    }
    /**
     * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
     */
    public com.github.cooker.core.RickMethodMessage.methodMessageOrBuilder getMethodBodyOrBuilder() {
      if (bodyCase_ == 9) {
         return (com.github.cooker.core.RickMethodMessage.methodMessage) body_;
      }
      return com.github.cooker.core.RickMethodMessage.methodMessage.getDefaultInstance();
    }

    public static final int LOGBODY_FIELD_NUMBER = 10;
    /**
     * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
     */
    public boolean hasLogBody() {
      return bodyCase_ == 10;
    }
    /**
     * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
     */
    public com.github.cooker.core.RickLogMessage.logMessage getLogBody() {
      if (bodyCase_ == 10) {
         return (com.github.cooker.core.RickLogMessage.logMessage) body_;
      }
      return com.github.cooker.core.RickLogMessage.logMessage.getDefaultInstance();
    }
    /**
     * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
     */
    public com.github.cooker.core.RickLogMessage.logMessageOrBuilder getLogBodyOrBuilder() {
      if (bodyCase_ == 10) {
         return (com.github.cooker.core.RickLogMessage.logMessage) body_;
      }
      return com.github.cooker.core.RickLogMessage.logMessage.getDefaultInstance();
    }

    public static final int FILEBODY_FIELD_NUMBER = 11;
    /**
     * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
     */
    public boolean hasFileBody() {
      return bodyCase_ == 11;
    }
    /**
     * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
     */
    public com.github.cooker.core.RickFileMessage.fileMessage getFileBody() {
      if (bodyCase_ == 11) {
         return (com.github.cooker.core.RickFileMessage.fileMessage) body_;
      }
      return com.github.cooker.core.RickFileMessage.fileMessage.getDefaultInstance();
    }
    /**
     * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
     */
    public com.github.cooker.core.RickFileMessage.fileMessageOrBuilder getFileBodyOrBuilder() {
      if (bodyCase_ == 11) {
         return (com.github.cooker.core.RickFileMessage.fileMessage) body_;
      }
      return com.github.cooker.core.RickFileMessage.fileMessage.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (timestamp_ != null) {
        output.writeMessage(1, getTimestamp());
      }
      if (serialNo_ != 0L) {
        output.writeUInt64(2, serialNo_);
      }
      if (!getBusinessNoBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, businessNo_);
      }
      if (!getMethodBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, method_);
      }
      if (!getClientIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, clientId_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetParams(),
          ParamsDefaultEntryHolder.defaultEntry,
          6);
      if (router_ != 0) {
        output.writeUInt32(7, router_);
      }
      if (type_ != com.github.cooker.core.RickType.messageType.FILE.getNumber()) {
        output.writeEnum(8, type_);
      }
      if (bodyCase_ == 9) {
        output.writeMessage(9, (com.github.cooker.core.RickMethodMessage.methodMessage) body_);
      }
      if (bodyCase_ == 10) {
        output.writeMessage(10, (com.github.cooker.core.RickLogMessage.logMessage) body_);
      }
      if (bodyCase_ == 11) {
        output.writeMessage(11, (com.github.cooker.core.RickFileMessage.fileMessage) body_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (timestamp_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTimestamp());
      }
      if (serialNo_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, serialNo_);
      }
      if (!getBusinessNoBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, businessNo_);
      }
      if (!getMethodBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, method_);
      }
      if (!getClientIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, clientId_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetParams().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        params__ = ParamsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, params__);
      }
      if (router_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, router_);
      }
      if (type_ != com.github.cooker.core.RickType.messageType.FILE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, type_);
      }
      if (bodyCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, (com.github.cooker.core.RickMethodMessage.methodMessage) body_);
      }
      if (bodyCase_ == 10) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, (com.github.cooker.core.RickLogMessage.logMessage) body_);
      }
      if (bodyCase_ == 11) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, (com.github.cooker.core.RickFileMessage.fileMessage) body_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.github.cooker.core.RickMessage.msg)) {
        return super.equals(obj);
      }
      com.github.cooker.core.RickMessage.msg other = (com.github.cooker.core.RickMessage.msg) obj;

      if (hasTimestamp() != other.hasTimestamp()) return false;
      if (hasTimestamp()) {
        if (!getTimestamp()
            .equals(other.getTimestamp())) return false;
      }
      if (getSerialNo()
          != other.getSerialNo()) return false;
      if (!getBusinessNo()
          .equals(other.getBusinessNo())) return false;
      if (!getMethod()
          .equals(other.getMethod())) return false;
      if (!getClientId()
          .equals(other.getClientId())) return false;
      if (!internalGetParams().equals(
          other.internalGetParams())) return false;
      if (getRouter()
          != other.getRouter()) return false;
      if (type_ != other.type_) return false;
      if (!getBodyCase().equals(other.getBodyCase())) return false;
      switch (bodyCase_) {
        case 9:
          if (!getMethodBody()
              .equals(other.getMethodBody())) return false;
          break;
        case 10:
          if (!getLogBody()
              .equals(other.getLogBody())) return false;
          break;
        case 11:
          if (!getFileBody()
              .equals(other.getFileBody())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTimestamp()) {
        hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + getTimestamp().hashCode();
      }
      hash = (37 * hash) + SERIALNO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSerialNo());
      hash = (37 * hash) + BUSINESSNO_FIELD_NUMBER;
      hash = (53 * hash) + getBusinessNo().hashCode();
      hash = (37 * hash) + METHOD_FIELD_NUMBER;
      hash = (53 * hash) + getMethod().hashCode();
      hash = (37 * hash) + CLIENTID_FIELD_NUMBER;
      hash = (53 * hash) + getClientId().hashCode();
      if (!internalGetParams().getMap().isEmpty()) {
        hash = (37 * hash) + PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetParams().hashCode();
      }
      hash = (37 * hash) + ROUTER_FIELD_NUMBER;
      hash = (53 * hash) + getRouter();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      switch (bodyCase_) {
        case 9:
          hash = (37 * hash) + METHODBODY_FIELD_NUMBER;
          hash = (53 * hash) + getMethodBody().hashCode();
          break;
        case 10:
          hash = (37 * hash) + LOGBODY_FIELD_NUMBER;
          hash = (53 * hash) + getLogBody().hashCode();
          break;
        case 11:
          hash = (37 * hash) + FILEBODY_FIELD_NUMBER;
          hash = (53 * hash) + getFileBody().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.github.cooker.core.RickMessage.msg parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.cooker.core.RickMessage.msg parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.cooker.core.RickMessage.msg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.cooker.core.RickMessage.msg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.cooker.core.RickMessage.msg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.cooker.core.RickMessage.msg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.cooker.core.RickMessage.msg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.cooker.core.RickMessage.msg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.cooker.core.RickMessage.msg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.github.cooker.core.RickMessage.msg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.cooker.core.RickMessage.msg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.cooker.core.RickMessage.msg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.cooker.core.RickMessage.msg prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.github.cooker.core.msg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.github.cooker.core.msg)
        com.github.cooker.core.RickMessage.msgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.cooker.core.RickMessage.internal_static_com_github_cooker_core_msg_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetMutableParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.cooker.core.RickMessage.internal_static_com_github_cooker_core_msg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.cooker.core.RickMessage.msg.class, com.github.cooker.core.RickMessage.msg.Builder.class);
      }

      // Construct using com.github.cooker.core.RickMessage.msg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (timestampBuilder_ == null) {
          timestamp_ = null;
        } else {
          timestamp_ = null;
          timestampBuilder_ = null;
        }
        serialNo_ = 0L;

        businessNo_ = "";

        method_ = "";

        clientId_ = "";

        internalGetMutableParams().clear();
        router_ = 0;

        type_ = 0;

        bodyCase_ = 0;
        body_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.cooker.core.RickMessage.internal_static_com_github_cooker_core_msg_descriptor;
      }

      @java.lang.Override
      public com.github.cooker.core.RickMessage.msg getDefaultInstanceForType() {
        return com.github.cooker.core.RickMessage.msg.getDefaultInstance();
      }

      @java.lang.Override
      public com.github.cooker.core.RickMessage.msg build() {
        com.github.cooker.core.RickMessage.msg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.github.cooker.core.RickMessage.msg buildPartial() {
        com.github.cooker.core.RickMessage.msg result = new com.github.cooker.core.RickMessage.msg(this);
        int from_bitField0_ = bitField0_;
        if (timestampBuilder_ == null) {
          result.timestamp_ = timestamp_;
        } else {
          result.timestamp_ = timestampBuilder_.build();
        }
        result.serialNo_ = serialNo_;
        result.businessNo_ = businessNo_;
        result.method_ = method_;
        result.clientId_ = clientId_;
        result.params_ = internalGetParams();
        result.params_.makeImmutable();
        result.router_ = router_;
        result.type_ = type_;
        if (bodyCase_ == 9) {
          if (methodBodyBuilder_ == null) {
            result.body_ = body_;
          } else {
            result.body_ = methodBodyBuilder_.build();
          }
        }
        if (bodyCase_ == 10) {
          if (logBodyBuilder_ == null) {
            result.body_ = body_;
          } else {
            result.body_ = logBodyBuilder_.build();
          }
        }
        if (bodyCase_ == 11) {
          if (fileBodyBuilder_ == null) {
            result.body_ = body_;
          } else {
            result.body_ = fileBodyBuilder_.build();
          }
        }
        result.bodyCase_ = bodyCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.cooker.core.RickMessage.msg) {
          return mergeFrom((com.github.cooker.core.RickMessage.msg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.cooker.core.RickMessage.msg other) {
        if (other == com.github.cooker.core.RickMessage.msg.getDefaultInstance()) return this;
        if (other.hasTimestamp()) {
          mergeTimestamp(other.getTimestamp());
        }
        if (other.getSerialNo() != 0L) {
          setSerialNo(other.getSerialNo());
        }
        if (!other.getBusinessNo().isEmpty()) {
          businessNo_ = other.businessNo_;
          onChanged();
        }
        if (!other.getMethod().isEmpty()) {
          method_ = other.method_;
          onChanged();
        }
        if (!other.getClientId().isEmpty()) {
          clientId_ = other.clientId_;
          onChanged();
        }
        internalGetMutableParams().mergeFrom(
            other.internalGetParams());
        if (other.getRouter() != 0) {
          setRouter(other.getRouter());
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        switch (other.getBodyCase()) {
          case METHODBODY: {
            mergeMethodBody(other.getMethodBody());
            break;
          }
          case LOGBODY: {
            mergeLogBody(other.getLogBody());
            break;
          }
          case FILEBODY: {
            mergeFileBody(other.getFileBody());
            break;
          }
          case BODY_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.cooker.core.RickMessage.msg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.cooker.core.RickMessage.msg) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bodyCase_ = 0;
      private java.lang.Object body_;
      public BodyCase
          getBodyCase() {
        return BodyCase.forNumber(
            bodyCase_);
      }

      public Builder clearBody() {
        bodyCase_ = 0;
        body_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.Timestamp timestamp_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> timestampBuilder_;
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 1;</code>
       */
      public boolean hasTimestamp() {
        return timestampBuilder_ != null || timestamp_ != null;
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 1;</code>
       */
      public com.google.protobuf.Timestamp getTimestamp() {
        if (timestampBuilder_ == null) {
          return timestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
        } else {
          return timestampBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder setTimestamp(com.google.protobuf.Timestamp value) {
        if (timestampBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timestamp_ = value;
          onChanged();
        } else {
          timestampBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder setTimestamp(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        if (timestampBuilder_ == null) {
          timestamp_ = builderForValue.build();
          onChanged();
        } else {
          timestampBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder mergeTimestamp(com.google.protobuf.Timestamp value) {
        if (timestampBuilder_ == null) {
          if (timestamp_ != null) {
            timestamp_ =
              com.google.protobuf.Timestamp.newBuilder(timestamp_).mergeFrom(value).buildPartial();
          } else {
            timestamp_ = value;
          }
          onChanged();
        } else {
          timestampBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder clearTimestamp() {
        if (timestampBuilder_ == null) {
          timestamp_ = null;
          onChanged();
        } else {
          timestamp_ = null;
          timestampBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 1;</code>
       */
      public com.google.protobuf.Timestamp.Builder getTimestampBuilder() {
        
        onChanged();
        return getTimestampFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 1;</code>
       */
      public com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder() {
        if (timestampBuilder_ != null) {
          return timestampBuilder_.getMessageOrBuilder();
        } else {
          return timestamp_ == null ?
              com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
        }
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.google.protobuf.Timestamp timestamp = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
          getTimestampFieldBuilder() {
        if (timestampBuilder_ == null) {
          timestampBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                  getTimestamp(),
                  getParentForChildren(),
                  isClean());
          timestamp_ = null;
        }
        return timestampBuilder_;
      }

      private long serialNo_ ;
      /**
       * <pre>
       *请求序号
       * </pre>
       *
       * <code>uint64 serialNo = 2;</code>
       */
      public long getSerialNo() {
        return serialNo_;
      }
      /**
       * <pre>
       *请求序号
       * </pre>
       *
       * <code>uint64 serialNo = 2;</code>
       */
      public Builder setSerialNo(long value) {
        
        serialNo_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *请求序号
       * </pre>
       *
       * <code>uint64 serialNo = 2;</code>
       */
      public Builder clearSerialNo() {
        
        serialNo_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object businessNo_ = "";
      /**
       * <code>string businessNo = 3;</code>
       */
      public java.lang.String getBusinessNo() {
        java.lang.Object ref = businessNo_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          businessNo_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string businessNo = 3;</code>
       */
      public com.google.protobuf.ByteString
          getBusinessNoBytes() {
        java.lang.Object ref = businessNo_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          businessNo_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string businessNo = 3;</code>
       */
      public Builder setBusinessNo(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        businessNo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string businessNo = 3;</code>
       */
      public Builder clearBusinessNo() {
        
        businessNo_ = getDefaultInstance().getBusinessNo();
        onChanged();
        return this;
      }
      /**
       * <code>string businessNo = 3;</code>
       */
      public Builder setBusinessNoBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        businessNo_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object method_ = "";
      /**
       * <pre>
       *方法
       * </pre>
       *
       * <code>string method = 4;</code>
       */
      public java.lang.String getMethod() {
        java.lang.Object ref = method_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          method_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *方法
       * </pre>
       *
       * <code>string method = 4;</code>
       */
      public com.google.protobuf.ByteString
          getMethodBytes() {
        java.lang.Object ref = method_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          method_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *方法
       * </pre>
       *
       * <code>string method = 4;</code>
       */
      public Builder setMethod(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        method_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *方法
       * </pre>
       *
       * <code>string method = 4;</code>
       */
      public Builder clearMethod() {
        
        method_ = getDefaultInstance().getMethod();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *方法
       * </pre>
       *
       * <code>string method = 4;</code>
       */
      public Builder setMethodBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        method_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object clientId_ = "";
      /**
       * <pre>
       *客户端号
       * </pre>
       *
       * <code>string clientId = 5;</code>
       */
      public java.lang.String getClientId() {
        java.lang.Object ref = clientId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          clientId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *客户端号
       * </pre>
       *
       * <code>string clientId = 5;</code>
       */
      public com.google.protobuf.ByteString
          getClientIdBytes() {
        java.lang.Object ref = clientId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *客户端号
       * </pre>
       *
       * <code>string clientId = 5;</code>
       */
      public Builder setClientId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        clientId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *客户端号
       * </pre>
       *
       * <code>string clientId = 5;</code>
       */
      public Builder clearClientId() {
        
        clientId_ = getDefaultInstance().getClientId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *客户端号
       * </pre>
       *
       * <code>string clientId = 5;</code>
       */
      public Builder setClientIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        clientId_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> params_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetParams() {
        if (params_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ParamsDefaultEntryHolder.defaultEntry);
        }
        return params_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableParams() {
        onChanged();;
        if (params_ == null) {
          params_ = com.google.protobuf.MapField.newMapField(
              ParamsDefaultEntryHolder.defaultEntry);
        }
        if (!params_.isMutable()) {
          params_ = params_.copy();
        }
        return params_;
      }

      public int getParamsCount() {
        return internalGetParams().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      public boolean containsParams(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetParams().getMap().containsKey(key);
      }
      /**
       * Use {@link #getParamsMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getParams() {
        return getParamsMap();
      }
      /**
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getParamsMap() {
        return internalGetParams().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      public java.lang.String getParamsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetParams().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      public java.lang.String getParamsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetParams().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearParams() {
        internalGetMutableParams().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      public Builder removeParams(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableParams().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableParams() {
        return internalGetMutableParams().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; params = 6;</code>
       */
      public Builder putParams(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableParams().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      public Builder putAllParams(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableParams().getMutableMap()
            .putAll(values);
        return this;
      }

      private int router_ ;
      /**
       * <code>uint32 router = 7;</code>
       */
      public int getRouter() {
        return router_;
      }
      /**
       * <code>uint32 router = 7;</code>
       */
      public Builder setRouter(int value) {
        
        router_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 router = 7;</code>
       */
      public Builder clearRouter() {
        
        router_ = 0;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <code>.com.github.cooker.core.messageType type = 8;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <code>.com.github.cooker.core.messageType type = 8;</code>
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.com.github.cooker.core.messageType type = 8;</code>
       */
      public com.github.cooker.core.RickType.messageType getType() {
        @SuppressWarnings("deprecation")
        com.github.cooker.core.RickType.messageType result = com.github.cooker.core.RickType.messageType.valueOf(type_);
        return result == null ? com.github.cooker.core.RickType.messageType.UNRECOGNIZED : result;
      }
      /**
       * <code>.com.github.cooker.core.messageType type = 8;</code>
       */
      public Builder setType(com.github.cooker.core.RickType.messageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.github.cooker.core.messageType type = 8;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.github.cooker.core.RickMethodMessage.methodMessage, com.github.cooker.core.RickMethodMessage.methodMessage.Builder, com.github.cooker.core.RickMethodMessage.methodMessageOrBuilder> methodBodyBuilder_;
      /**
       * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
       */
      public boolean hasMethodBody() {
        return bodyCase_ == 9;
      }
      /**
       * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
       */
      public com.github.cooker.core.RickMethodMessage.methodMessage getMethodBody() {
        if (methodBodyBuilder_ == null) {
          if (bodyCase_ == 9) {
            return (com.github.cooker.core.RickMethodMessage.methodMessage) body_;
          }
          return com.github.cooker.core.RickMethodMessage.methodMessage.getDefaultInstance();
        } else {
          if (bodyCase_ == 9) {
            return methodBodyBuilder_.getMessage();
          }
          return com.github.cooker.core.RickMethodMessage.methodMessage.getDefaultInstance();
        }
      }
      /**
       * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
       */
      public Builder setMethodBody(com.github.cooker.core.RickMethodMessage.methodMessage value) {
        if (methodBodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          methodBodyBuilder_.setMessage(value);
        }
        bodyCase_ = 9;
        return this;
      }
      /**
       * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
       */
      public Builder setMethodBody(
          com.github.cooker.core.RickMethodMessage.methodMessage.Builder builderForValue) {
        if (methodBodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          methodBodyBuilder_.setMessage(builderForValue.build());
        }
        bodyCase_ = 9;
        return this;
      }
      /**
       * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
       */
      public Builder mergeMethodBody(com.github.cooker.core.RickMethodMessage.methodMessage value) {
        if (methodBodyBuilder_ == null) {
          if (bodyCase_ == 9 &&
              body_ != com.github.cooker.core.RickMethodMessage.methodMessage.getDefaultInstance()) {
            body_ = com.github.cooker.core.RickMethodMessage.methodMessage.newBuilder((com.github.cooker.core.RickMethodMessage.methodMessage) body_)
                .mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          if (bodyCase_ == 9) {
            methodBodyBuilder_.mergeFrom(value);
          }
          methodBodyBuilder_.setMessage(value);
        }
        bodyCase_ = 9;
        return this;
      }
      /**
       * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
       */
      public Builder clearMethodBody() {
        if (methodBodyBuilder_ == null) {
          if (bodyCase_ == 9) {
            bodyCase_ = 0;
            body_ = null;
            onChanged();
          }
        } else {
          if (bodyCase_ == 9) {
            bodyCase_ = 0;
            body_ = null;
          }
          methodBodyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
       */
      public com.github.cooker.core.RickMethodMessage.methodMessage.Builder getMethodBodyBuilder() {
        return getMethodBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
       */
      public com.github.cooker.core.RickMethodMessage.methodMessageOrBuilder getMethodBodyOrBuilder() {
        if ((bodyCase_ == 9) && (methodBodyBuilder_ != null)) {
          return methodBodyBuilder_.getMessageOrBuilder();
        } else {
          if (bodyCase_ == 9) {
            return (com.github.cooker.core.RickMethodMessage.methodMessage) body_;
          }
          return com.github.cooker.core.RickMethodMessage.methodMessage.getDefaultInstance();
        }
      }
      /**
       * <code>.com.github.cooker.core.methodMessage methodBody = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.github.cooker.core.RickMethodMessage.methodMessage, com.github.cooker.core.RickMethodMessage.methodMessage.Builder, com.github.cooker.core.RickMethodMessage.methodMessageOrBuilder> 
          getMethodBodyFieldBuilder() {
        if (methodBodyBuilder_ == null) {
          if (!(bodyCase_ == 9)) {
            body_ = com.github.cooker.core.RickMethodMessage.methodMessage.getDefaultInstance();
          }
          methodBodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.github.cooker.core.RickMethodMessage.methodMessage, com.github.cooker.core.RickMethodMessage.methodMessage.Builder, com.github.cooker.core.RickMethodMessage.methodMessageOrBuilder>(
                  (com.github.cooker.core.RickMethodMessage.methodMessage) body_,
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        bodyCase_ = 9;
        onChanged();;
        return methodBodyBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.github.cooker.core.RickLogMessage.logMessage, com.github.cooker.core.RickLogMessage.logMessage.Builder, com.github.cooker.core.RickLogMessage.logMessageOrBuilder> logBodyBuilder_;
      /**
       * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
       */
      public boolean hasLogBody() {
        return bodyCase_ == 10;
      }
      /**
       * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
       */
      public com.github.cooker.core.RickLogMessage.logMessage getLogBody() {
        if (logBodyBuilder_ == null) {
          if (bodyCase_ == 10) {
            return (com.github.cooker.core.RickLogMessage.logMessage) body_;
          }
          return com.github.cooker.core.RickLogMessage.logMessage.getDefaultInstance();
        } else {
          if (bodyCase_ == 10) {
            return logBodyBuilder_.getMessage();
          }
          return com.github.cooker.core.RickLogMessage.logMessage.getDefaultInstance();
        }
      }
      /**
       * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
       */
      public Builder setLogBody(com.github.cooker.core.RickLogMessage.logMessage value) {
        if (logBodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          logBodyBuilder_.setMessage(value);
        }
        bodyCase_ = 10;
        return this;
      }
      /**
       * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
       */
      public Builder setLogBody(
          com.github.cooker.core.RickLogMessage.logMessage.Builder builderForValue) {
        if (logBodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          logBodyBuilder_.setMessage(builderForValue.build());
        }
        bodyCase_ = 10;
        return this;
      }
      /**
       * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
       */
      public Builder mergeLogBody(com.github.cooker.core.RickLogMessage.logMessage value) {
        if (logBodyBuilder_ == null) {
          if (bodyCase_ == 10 &&
              body_ != com.github.cooker.core.RickLogMessage.logMessage.getDefaultInstance()) {
            body_ = com.github.cooker.core.RickLogMessage.logMessage.newBuilder((com.github.cooker.core.RickLogMessage.logMessage) body_)
                .mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          if (bodyCase_ == 10) {
            logBodyBuilder_.mergeFrom(value);
          }
          logBodyBuilder_.setMessage(value);
        }
        bodyCase_ = 10;
        return this;
      }
      /**
       * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
       */
      public Builder clearLogBody() {
        if (logBodyBuilder_ == null) {
          if (bodyCase_ == 10) {
            bodyCase_ = 0;
            body_ = null;
            onChanged();
          }
        } else {
          if (bodyCase_ == 10) {
            bodyCase_ = 0;
            body_ = null;
          }
          logBodyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
       */
      public com.github.cooker.core.RickLogMessage.logMessage.Builder getLogBodyBuilder() {
        return getLogBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
       */
      public com.github.cooker.core.RickLogMessage.logMessageOrBuilder getLogBodyOrBuilder() {
        if ((bodyCase_ == 10) && (logBodyBuilder_ != null)) {
          return logBodyBuilder_.getMessageOrBuilder();
        } else {
          if (bodyCase_ == 10) {
            return (com.github.cooker.core.RickLogMessage.logMessage) body_;
          }
          return com.github.cooker.core.RickLogMessage.logMessage.getDefaultInstance();
        }
      }
      /**
       * <code>.com.github.cooker.core.logMessage logBody = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.github.cooker.core.RickLogMessage.logMessage, com.github.cooker.core.RickLogMessage.logMessage.Builder, com.github.cooker.core.RickLogMessage.logMessageOrBuilder> 
          getLogBodyFieldBuilder() {
        if (logBodyBuilder_ == null) {
          if (!(bodyCase_ == 10)) {
            body_ = com.github.cooker.core.RickLogMessage.logMessage.getDefaultInstance();
          }
          logBodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.github.cooker.core.RickLogMessage.logMessage, com.github.cooker.core.RickLogMessage.logMessage.Builder, com.github.cooker.core.RickLogMessage.logMessageOrBuilder>(
                  (com.github.cooker.core.RickLogMessage.logMessage) body_,
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        bodyCase_ = 10;
        onChanged();;
        return logBodyBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.github.cooker.core.RickFileMessage.fileMessage, com.github.cooker.core.RickFileMessage.fileMessage.Builder, com.github.cooker.core.RickFileMessage.fileMessageOrBuilder> fileBodyBuilder_;
      /**
       * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
       */
      public boolean hasFileBody() {
        return bodyCase_ == 11;
      }
      /**
       * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
       */
      public com.github.cooker.core.RickFileMessage.fileMessage getFileBody() {
        if (fileBodyBuilder_ == null) {
          if (bodyCase_ == 11) {
            return (com.github.cooker.core.RickFileMessage.fileMessage) body_;
          }
          return com.github.cooker.core.RickFileMessage.fileMessage.getDefaultInstance();
        } else {
          if (bodyCase_ == 11) {
            return fileBodyBuilder_.getMessage();
          }
          return com.github.cooker.core.RickFileMessage.fileMessage.getDefaultInstance();
        }
      }
      /**
       * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
       */
      public Builder setFileBody(com.github.cooker.core.RickFileMessage.fileMessage value) {
        if (fileBodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          fileBodyBuilder_.setMessage(value);
        }
        bodyCase_ = 11;
        return this;
      }
      /**
       * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
       */
      public Builder setFileBody(
          com.github.cooker.core.RickFileMessage.fileMessage.Builder builderForValue) {
        if (fileBodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          fileBodyBuilder_.setMessage(builderForValue.build());
        }
        bodyCase_ = 11;
        return this;
      }
      /**
       * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
       */
      public Builder mergeFileBody(com.github.cooker.core.RickFileMessage.fileMessage value) {
        if (fileBodyBuilder_ == null) {
          if (bodyCase_ == 11 &&
              body_ != com.github.cooker.core.RickFileMessage.fileMessage.getDefaultInstance()) {
            body_ = com.github.cooker.core.RickFileMessage.fileMessage.newBuilder((com.github.cooker.core.RickFileMessage.fileMessage) body_)
                .mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          if (bodyCase_ == 11) {
            fileBodyBuilder_.mergeFrom(value);
          }
          fileBodyBuilder_.setMessage(value);
        }
        bodyCase_ = 11;
        return this;
      }
      /**
       * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
       */
      public Builder clearFileBody() {
        if (fileBodyBuilder_ == null) {
          if (bodyCase_ == 11) {
            bodyCase_ = 0;
            body_ = null;
            onChanged();
          }
        } else {
          if (bodyCase_ == 11) {
            bodyCase_ = 0;
            body_ = null;
          }
          fileBodyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
       */
      public com.github.cooker.core.RickFileMessage.fileMessage.Builder getFileBodyBuilder() {
        return getFileBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
       */
      public com.github.cooker.core.RickFileMessage.fileMessageOrBuilder getFileBodyOrBuilder() {
        if ((bodyCase_ == 11) && (fileBodyBuilder_ != null)) {
          return fileBodyBuilder_.getMessageOrBuilder();
        } else {
          if (bodyCase_ == 11) {
            return (com.github.cooker.core.RickFileMessage.fileMessage) body_;
          }
          return com.github.cooker.core.RickFileMessage.fileMessage.getDefaultInstance();
        }
      }
      /**
       * <code>.com.github.cooker.core.fileMessage fileBody = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.github.cooker.core.RickFileMessage.fileMessage, com.github.cooker.core.RickFileMessage.fileMessage.Builder, com.github.cooker.core.RickFileMessage.fileMessageOrBuilder> 
          getFileBodyFieldBuilder() {
        if (fileBodyBuilder_ == null) {
          if (!(bodyCase_ == 11)) {
            body_ = com.github.cooker.core.RickFileMessage.fileMessage.getDefaultInstance();
          }
          fileBodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.github.cooker.core.RickFileMessage.fileMessage, com.github.cooker.core.RickFileMessage.fileMessage.Builder, com.github.cooker.core.RickFileMessage.fileMessageOrBuilder>(
                  (com.github.cooker.core.RickFileMessage.fileMessage) body_,
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        bodyCase_ = 11;
        onChanged();;
        return fileBodyBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.github.cooker.core.msg)
    }

    // @@protoc_insertion_point(class_scope:com.github.cooker.core.msg)
    private static final com.github.cooker.core.RickMessage.msg DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.github.cooker.core.RickMessage.msg();
    }

    public static com.github.cooker.core.RickMessage.msg getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<msg>
        PARSER = new com.google.protobuf.AbstractParser<msg>() {
      @java.lang.Override
      public msg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new msg(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<msg> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<msg> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.github.cooker.core.RickMessage.msg getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_github_cooker_core_msg_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_github_cooker_core_msg_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_github_cooker_core_msg_ParamsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_github_cooker_core_msg_ParamsEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rmessage.proto\022\026com.github.cooker.core\032" +
      "\037google/protobuf/timestamp.proto\032\ntype.p" +
      "roto\032\020logMessage.proto\032\021fileMessage.prot" +
      "o\032\023methodMessage.proto\"\334\003\n\003msg\022-\n\ttimest" +
      "amp\030\001 \001(\0132\032.google.protobuf.Timestamp\022\020\n" +
      "\010serialNo\030\002 \001(\004\022\022\n\nbusinessNo\030\003 \001(\t\022\016\n\006m" +
      "ethod\030\004 \001(\t\022\020\n\010clientId\030\005 \001(\t\0227\n\006params\030" +
      "\006 \003(\0132\'.com.github.cooker.core.msg.Param" +
      "sEntry\022\016\n\006router\030\007 \001(\r\0221\n\004type\030\010 \001(\0162#.c" +
      "om.github.cooker.core.messageType\022;\n\nmet" +
      "hodBody\030\t \001(\0132%.com.github.cooker.core.m" +
      "ethodMessageH\000\0225\n\007logBody\030\n \001(\0132\".com.gi" +
      "thub.cooker.core.logMessageH\000\0227\n\010fileBod" +
      "y\030\013 \001(\0132#.com.github.cooker.core.fileMes" +
      "sageH\000\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va" +
      "lue\030\002 \001(\t:\0028\001B\006\n\004bodyB\rB\013RickMessageb\006pr" +
      "oto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.TimestampProto.getDescriptor(),
          com.github.cooker.core.RickType.getDescriptor(),
          com.github.cooker.core.RickLogMessage.getDescriptor(),
          com.github.cooker.core.RickFileMessage.getDescriptor(),
          com.github.cooker.core.RickMethodMessage.getDescriptor(),
        });
    internal_static_com_github_cooker_core_msg_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_github_cooker_core_msg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_github_cooker_core_msg_descriptor,
        new java.lang.String[] { "Timestamp", "SerialNo", "BusinessNo", "Method", "ClientId", "Params", "Router", "Type", "MethodBody", "LogBody", "FileBody", "Body", });
    internal_static_com_github_cooker_core_msg_ParamsEntry_descriptor =
      internal_static_com_github_cooker_core_msg_descriptor.getNestedTypes().get(0);
    internal_static_com_github_cooker_core_msg_ParamsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_github_cooker_core_msg_ParamsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    com.google.protobuf.TimestampProto.getDescriptor();
    com.github.cooker.core.RickType.getDescriptor();
    com.github.cooker.core.RickLogMessage.getDescriptor();
    com.github.cooker.core.RickFileMessage.getDescriptor();
    com.github.cooker.core.RickMethodMessage.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
